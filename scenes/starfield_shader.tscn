[gd_scene load_steps=16 format=2]

[sub_resource type="PlaneMesh" id=1]
size = Vector2( 20, 10 )

[sub_resource type="VisualShaderNodeVectorOp" id=2]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.002, 0.002, 0.002 ) ]
operator = 3

[sub_resource type="VisualShaderNodeVec3Constant" id=3]
constant = Vector3( 2, 2, 1 )

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "time"

[sub_resource type="VisualShaderNodeGlobalExpression" id=12]
size = Vector2( 679.5, 392.5 )
expression = "float rand(vec3 input) {
	float a = 12.9898;
	float b = 78.233;
	float c = 43758.5453;
	float dt= dot(input.xy, vec2(a, b));
	float sn= mod(dt,3.14);
	return fract(sin(sn) * c);
}
"

[sub_resource type="VisualShaderNodeVectorDecompose" id=14]

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "viewport_size"

[sub_resource type="VisualShaderNodeVectorCompose" id=16]
default_input_values = [ 0, 0.0, 1, 0.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeVectorOp" id=17]
operator = 3

[sub_resource type="VisualShaderNodeExpression" id=4]
size = Vector2( 641, 518.5 )
expression = "float rand = rand(input);
if(rand > 0.995) {
	color = vec3(1.0, 1.0, 1.0);
} else if(rand > 0.99) {
	color = vec3(0.1, 0.1, 0.1);
} else {
	color = vec3(0.0, 0.0, 0.0);
}
"

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorFunc" id=7]
function = 25

[sub_resource type="VisualShaderNodeVectorOp" id=8]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.002, 0.002, 0.002 ) ]
operator = 2

[sub_resource type="VisualShader" id=9]
code = "shader_type spatial;
render_mode specular_schlick_ggx, unshaded;



// GlobalExpression:0
	float rand(vec3 input) {
		float a = 12.9898;
		float b = 78.233;
		float c = 43758.5453;
		float dt= dot(input.xy, vec2(a, b));
		float sn= mod(dt,3.14);
		return fract(sin(sn) * c);
	}
	

void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Input:16
	vec3 n_out16p0 = vec3(VIEWPORT_SIZE, 0.0);

// VectorDecompose:15
	float n_out15p0 = n_out16p0.x;
	float n_out15p1 = n_out16p0.y;
	float n_out15p2 = n_out16p0.z;

// VectorCompose:17
	float n_in17p2 = 1.00000;
	vec3 n_out17p0 = vec3(n_out15p0, n_out15p0, n_in17p2);

// Vector:11
	vec3 n_out11p0 = vec3(2.000000, 2.000000, 1.000000);

// VectorOp:18
	vec3 n_out18p0 = n_out17p0 / n_out11p0;

// VectorOp:9
	vec3 n_out9p0 = n_out4p0 * n_out18p0;

// VectorFunc:8
	vec3 n_out8p0 = round(n_out9p0);

// VectorOp:10
	vec3 n_out10p0 = n_out8p0 / n_out18p0;

// Input:12
	float n_out12p0 = TIME;

// Expression:3
	vec3 n_out3p0;
	n_out3p0 = vec3(0.0, 0.0, 0.0);
	{
		float rand = rand(n_out10p0);
		if(rand > 0.995) {
			n_out3p0 = vec3(1.0, 1.0, 1.0);
		} else if(rand > 0.99) {
			n_out3p0 = vec3(0.1, 0.1, 0.1);
		} else {
			n_out3p0 = vec3(0.0, 0.0, 0.0);
		}
		
	}

// Output:0
	ALBEDO = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 0, -191.6 )
flags/unshaded = true
nodes/fragment/0/position = Vector2( 2500, 0 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( 1780, 0 )
nodes/fragment/3/size = Vector2( 641, 518.5 )
nodes/fragment/3/input_ports = "0,1,input;1,0,time;"
nodes/fragment/3/output_ports = "0,1,color;"
nodes/fragment/3/expression = "float rand = rand(input);
if(rand > 0.995) {
	color = vec3(1.0, 1.0, 1.0);
} else if(rand > 0.99) {
	color = vec3(0.1, 0.1, 0.1);
} else {
	color = vec3(0.0, 0.0, 0.0);
}
"
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( 840, -120 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( 1280, -100 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( 1060, -140 )
nodes/fragment/10/node = SubResource( 2 )
nodes/fragment/10/position = Vector2( 1520, -120 )
nodes/fragment/11/node = SubResource( 3 )
nodes/fragment/11/position = Vector2( 540, -20 )
nodes/fragment/12/node = SubResource( 11 )
nodes/fragment/12/position = Vector2( 1520, 20 )
nodes/fragment/13/node = SubResource( 12 )
nodes/fragment/13/position = Vector2( 1020, 240 )
nodes/fragment/13/size = Vector2( 679.5, 392.5 )
nodes/fragment/13/input_ports = ""
nodes/fragment/13/output_ports = ""
nodes/fragment/13/expression = "float rand(vec3 input) {
	float a = 12.9898;
	float b = 78.233;
	float c = 43758.5453;
	float dt= dot(input.xy, vec2(a, b));
	float sn= mod(dt,3.14);
	return fract(sin(sn) * c);
}
"
nodes/fragment/15/node = SubResource( 14 )
nodes/fragment/15/position = Vector2( 360, 200 )
nodes/fragment/16/node = SubResource( 15 )
nodes/fragment/16/position = Vector2( 40, 200 )
nodes/fragment/17/node = SubResource( 16 )
nodes/fragment/17/position = Vector2( 660, 180 )
nodes/fragment/18/node = SubResource( 17 )
nodes/fragment/18/position = Vector2( 1020, 60 )
nodes/fragment/connections = PoolIntArray( 4, 0, 9, 0, 9, 0, 8, 0, 8, 0, 10, 0, 3, 0, 0, 0, 12, 0, 3, 1, 10, 0, 3, 0, 16, 0, 15, 0, 17, 0, 18, 0, 11, 0, 18, 1, 18, 0, 9, 1, 18, 0, 10, 1, 15, 0, 17, 0, 15, 0, 17, 1 )

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )

[node name="starfield_shader" type="CSGMesh"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, -3 )
mesh = SubResource( 1 )
material = SubResource( 10 )
